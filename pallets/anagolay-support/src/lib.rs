// This file is part of Anagolay Network.

// Copyright (C) 2019-2023 Anagolay Network.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

// Ensure we're `no_std` when compiling for Wasm.
#![cfg_attr(not(feature = "std"), no_std)]
#![feature(pattern)]

//! # Anagolay blockchain
//! This is the support pallet for the anagolay blockchain. It factors common types and behaviors
//! used in all other Anagolay pallets, which are:
//!
//! * `operations` - Exposes the extrinsics for creation, management and approval of Operations
//! * `workflows` - Exposes the extrinsics for creation, management and approval of Workflows
//!
//! ## Versions
//! Each entity on Anagolay blockchain is versioned. It means that upon creation, a check is
//! performed to prevent creation of multiple versions of the same entity and to verify that the
//! initial version that will be created is consistent
//!
//! ## Weights
//! Since creation of entities is costly, the call is required to be signed and to spend
//! a certain amount of tokens for the extrinsic call to succeed. This prevents overcharging the
//! chain. Weights of each call are generated by benchmark tests
//!  
//! ## Code structure
//! Each pallet presents the following modules:
//!
//! * lib - The entry point of the pallet, defines configuration, events, errors and extrinsics
//! * benchmarking - Runner of the benchmarking
//! * functions - Private behaviour of the pallet, the lib entry points delegate to this module
//! * mock - Prepares the mocks for unit tests, only used in test configuration
//! * types - Collects the types and the data model used by the pallet
//!
//! ## Features of the support crate
//! The factored common types are:
//!
//! * Identifiers - Every entity has their own (`OperationId`, `WorkflowId`, etc.) but they are all
//! aliases of a private struct `GenericId` that deals with validation and (de)serialization
//! * Characters - Offers an interface to deal with strings in nostd
//! * anagolay_structure! -  Macro that produces a pattern struct with an id, some data and an
//!   optional extra. The id is guaranteed to be computed from the data.
//! * anagolay_version_data!, anagolay_version_extra! - Other macros to produce pattern structs used
//!   by all entity to deal with their published artifacts and incremental versions on the
//!   blockchain
//! * anagolay_record! - Macro that produces a pattern struct used to store the entities on the
//!   chain along with the caller and the block number

// Ensure we're `no_std` when compiling for Wasm.
#![cfg_attr(not(feature = "std"), no_std)]

mod functions;
pub use functions::public::*;

mod types;
pub use types::*;

#[cfg(test)]
mod mock;
#[cfg(test)]
mod tests;

pub use pallet::*;
pub use paste;

pub mod constants {
  pub use crate::pallet::*;
  use crate::{getter_for_constant, getter_for_hardcoded_constant};

  getter_for_constant!(MaxArtifacts, u32);
  getter_for_hardcoded_constant!(MaxCharactersLen, u32, 2048);
  getter_for_hardcoded_constant!(MaxBytesLen, u32, 4096);
  getter_for_hardcoded_constant!(MaxOperationConfigEntries, u32, 16);
  getter_for_hardcoded_constant!(MaxOperationInputsLen, u32, 99);
  getter_for_hardcoded_constant!(MaxGroups, u32, 16);
}

#[frame_support::pallet]
mod pallet {
  use crate::constants::MaxArtifactsGet;
  pub use crate::types::*;
  use core::convert::TryInto;
  use frame_support::pallet_prelude::*;
  use frame_system::pallet_prelude::*;

  #[pallet::pallet]
  #[pallet::generate_store(pub(super) trait Store)]
  pub struct Pallet<T>(_);

  #[pallet::config]
  pub trait Config: frame_system::Config {
    /// Maximum number of artifacts registered on Anagolay network at a given time.
    const MAX_ARTIFACTS: u32;
  }

  #[pallet::extra_constants]
  impl<T: Config> Pallet<T> {
    #[pallet::constant_name(MaxArtifacts)]
    fn max_artifacts() -> u32 {
      T::MAX_ARTIFACTS
    }
  }

  #[pallet::hooks]
  impl<T: Config> Hooks<BlockNumberFor<T>> for Pallet<T> {
    fn integrity_test() {
      assert!(T::MAX_ARTIFACTS > 0, "`MaxArtifacts` must ge greater than 0");
    }
  }

  #[pallet::call]
  impl<T: Config> Pallet<T> {}

  /// All published artifacts will appear here. Note that this list will be quite large, be aware of
  /// querying this without proper limits!
  #[pallet::storage]
  #[pallet::getter(fn artifacts_by_artifact_id)]
  pub type ArtifactsByArtifactId<T: Config> = StorageValue<_, BoundedVec<ArtifactId, MaxArtifactsGet<T>>, ValueQuery>;

  #[pallet::error]
  pub enum Error<T> {
    /// Insertion of Artifact failed since MaxArtifacts limit is reached
    MaxArtifactsLimitReached,
  }
}
