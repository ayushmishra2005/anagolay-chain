[config]
# https://github.com/sagiegurari/cargo-make#disabling-workspace-support
default_to_workspace = false

[tasks.docs]
description = "Generate rust documentation (override to include all deps, all features). This will overwrite the default docs which is the part of `makers docs-flow` so you can safely use it. It accepst all arguments as docs would"
args        = ["doc", "--all-features", "${@}"]


##########################
#####  TEST SECTION  #####
##########################
[tasks.test]
description   = "Test the project in less verbose mode for all features. It accepst all arguments as nexttest crate would with partitions for the testing in parallel"
command       = "cargo"
install_crate = true
args          = ["nextest", "run", "--all-features", "${@}"]

[tasks.test-parallel]
command = "makers"
args = [
  "test",
  "--partition",
  "count:${CI_NODE_INDEX}/${CI_NODE_TOTAL}",
  "${@}",
]
[tasks.test-with-release]
command = "makers"
args    = ["test", "--release", "${@}"]

[tasks.test-operations]
description = "Test `operations` pallet. This is using `makers test` to run"
command     = "makers"
args        = ["test", "-p", "operations", "${@}"]

[tasks.test-poe]
description = "Test `poe` pallet. This is using `makers test` to run"
command     = "makers"
args        = ["test", "-p", "poe", "${@}"]

[tasks.test-statements]
description = "Test `statements` pallet. This is using `makers test` to run"
command     = "makers"
args        = ["test", "-p", "statements", "${@}"]

[tasks.test-workflows]
description = "Test `workflows` pallet. This is using `makers test` to run"
command     = "makers"
args        = ["test", "-p", "workflows", "${@}"]

[tasks.test-anagolay-support]
description = "Test `anagolay-support` pallet. This is using `makers test` to run"
command     = "makers"
args        = ["test", "-p", "anagolay-support", "${@}"]

## Run the tests with benchmarking turned on
[tasks.test-benchmarking]
description = "Execute unit and integration tests of a anagolay node with flags enabled for testing benchmarks."
category    = "anagolay"
command     = "makers"
args        = ["test", "--features", "runtime-benchmarks", "benchmarking", "${@}"]


##########################


[tasks.clean-anagolay]
category    = "anagolay"
description = "Remove generated artifact `anagolay`."
command     = "cargo"
args        = ["clean", "-p", "anagolay"]

[tasks.clean-all]
category    = "anagolay"
description = "Remove generated artifacts."
command     = "cargo"
args        = ["clean"]

[tasks.build]
category    = "anagolay"
description = "Compile the Anagolay runtime in debug mode. Accepts any valid build arguments."
command     = "cargo"
args        = ["build", "${@}"]

[tasks.build-production]
condition   = { profiles = ["production"] }
category    = "anagolay"
description = "Compile the Anagolay runtime in release mode with  option and custom profile `production`. Accepts any valid build arguments."
command     = "cargo"
args        = ["build", "--locked", "--profile", "production", "${@}"]

## Build release with feature runtime-benchmarks
[tasks.build-release-benchmarks]
condition   = { profiles = ["production"] }
category    = "anagolay"
description = "Compile the Anagolay runtime in release mode with feature flag for benchmarks. "
command     = "cargo"
args        = ["build", "--locked", "--release", "--features", "runtime-benchmarks"]


[tasks.chain-dev-purge]
category    = "anagolay"
description = "Purge the local chain database for debug build."
command     = "./target/debug/anagolay"
args        = ["purge-chain", "-y", "--dev", "--base-path", "./data"]

[tasks.chain-dev-start]
category = "anagolay"
description = "Starts the chain in dev mode with sane default flags."
command = "./target/debug/anagolay"
args = [
  "--dev",
  "--name",
  "idiyanale",
  "-l",
  "error,runtime,info",
  "--rpc-external",
  "--rpc-methods=Unsafe",
  "--unsafe-ws-external",
  "--no-telemetry",
  "--enable-offchain-indexing",
  "/tmp",
  "--base-path",
  "./data",
]

dependencies = ["build"]

# Gitlab CI flow
[tasks.ci-flow-light]
category     = "anagolay"
description  = "Experimental ci-flow which runs the checks in single run instead many."
args         = ["--release"]
dependencies = ["check-format-flow", "test-with-release"]


[tasks.coverage-grcov]
env           = { RUST_BACKTRACE = 1, CARGO_INCREMENTAL = 0, SKIP_WASM_BUILD = true, LLVM_PROFILE_FILE = "grcov-%p-%m.profraw", "RUSTFLAGS" = "-Cinstrument-coverage", CARGO_MAKE_GRCOV_VERSION = "0.8.13", "CARGO_MAKE_GRCOV_IGNORE_PATTERN" = "*cargo*" }
description   = "Installs (if missing) and runs coverage using grcov and llvm"
category      = "Test"
dependencies  = ["setup-sudo-env"]
script_runner = "bash"

install_script = '''
if [ "${CARGO_MAKE_SUDO_ENABLED}" == "false" ]; then
    echo "Skipping grcov installation as 'sudo' is disabled."
    exit 0
fi

if ! type "grcov" > /dev/null; then
  curl -L https://github.com/mozilla/grcov/releases/download/v${CARGO_MAKE_GRCOV_VERSION}/grcov-x86_64-unknown-linux-musl.tar.bz2 | tar jxf -
  chmod +x grcov
  sudo mv grcov /usr/local/bin
fi

rustup component add llvm-tools-preview

'''
script = '''
echo "Working Directory: ${CARGO_MAKE_WORKING_DIRECTORY}"

echo "Clean build ..."
cargo clean 

echo "Delete the residual profraw files"
find . -name "*.profraw" -type f -delete
find . -name "*.gcda" -type f -delete

echo "Building debug ..."
cargo make build --all-features

echo "Running test ..."
cargo test  --all-features --no-fail-fast

## cannot use the nextest because it reports 13:09:47 [ERROR] A panic occurred at /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/grcov-0.8.13/src/producer.rs:544: No input files found
# cargo make test --test-threads 1

echo "Generating HTML report ..."
grcov . \
--source-dir . \
--output-type html \
--binary-path ./target/debug/ \
--llvm \
--branch \
--ignore "/*" \
--ignore "${CARGO_MAKE_GRCOV_IGNORE_PATTERN}" \
--ignore-not-existing \
--output-path ./coverage

echo "Generating cobertura report ..."
grcov . \
--source-dir . \
--output-type cobertura \
--binary-path ./target/debug/ \
--llvm \
--branch \
--ignore-not-existing \
--ignore "/*" \
--ignore "${CARGO_MAKE_GRCOV_IGNORE_PATTERN}" \
-o ./coverage.xml


echo "Generating lcov report ..."
grcov . --binary-path ./target/debug/ -s . -t lcov --branch --ignore-not-existing --ignore "*cargo*" -o coverage.lcov
lcov_cobertura coverage.lcov
lcov --summary coverage.lcov


echo "Delete the residual profraw files"
find . -name "*.profraw" -type f -delete
find . -name "*.gcda" -type f -delete
'''
