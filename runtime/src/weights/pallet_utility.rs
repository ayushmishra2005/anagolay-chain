// This file is part of Anagolay Foundation.

// Copyright (C) 2019-2022 Anagolay Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_utility
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-02, STEPS: `50`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/anagolay
// benchmark
// pallet
// --chain
// dev
// --steps
// 50
// --repeat
// 100
// --pallet
// pallet_utility
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --output
// ./runtime/src/weights/pallet_utility.rs
// --template
// ./templates/dep-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
  sp_std::marker::PhantomData,
  traits::Get,
  weights::{constants::RocksDbWeight, Weight},
};

/// Weights for pallet_utility using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_utility::WeightInfo for WeightInfo<T> {
  fn batch(c: u32) -> Weight {
    (0 as Weight)
      // Standard Error: 11_000
      .saturating_add((4_392_000 as Weight).saturating_mul(c as Weight))
  }
  fn as_derivative() -> Weight {
    (5_872_000 as Weight)
  }
  fn batch_all(c: u32) -> Weight {
    (25_423_000 as Weight)
      // Standard Error: 8_000
      .saturating_add((4_223_000 as Weight).saturating_mul(c as Weight))
  }
  fn dispatch_as() -> Weight {
    (12_792_000 as Weight)
  }
  fn force_batch(c: u32) -> Weight {
    (0 as Weight)
      // Standard Error: 5_000
      .saturating_add((4_071_000 as Weight).saturating_mul(c as Weight))
  }
}
