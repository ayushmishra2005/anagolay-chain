// This file is part of Anagolay Foundation.

// Copyright (C) 2019-2022 Anagolay Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_uniques
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-10, STEPS: `50`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/anagolay
// benchmark
// pallet
// --chain
// dev
// --steps
// 50
// --repeat
// 100
// --pallet
// pallet_uniques
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --output
// ./runtime/src/weights/pallet_uniques.rs
// --template
// ./templates/dep-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
  sp_std::marker::PhantomData,
  traits::Get,
  weights::{constants::RocksDbWeight, Weight},
};

/// Weights for pallet_uniques using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_uniques::WeightInfo for WeightInfo<T> {
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques ClassAccount (r:0 w:1)
  fn create() -> Weight {
    (37_990_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques ClassAccount (r:0 w:1)
  fn force_create() -> Weight {
    (22_770_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques Asset (r:1 w:0)
  // Storage: Uniques ClassAccount (r:0 w:1)
  // Storage: Uniques Attribute (r:0 w:1000)
  // Storage: Uniques ClassMetadataOf (r:0 w:1)
  // Storage: Uniques InstanceMetadataOf (r:0 w:1000)
  // Storage: Uniques CollectionMaxSupply (r:0 w:1)
  // Storage: Uniques Account (r:0 w:20)
  fn destroy(n: u32, m: u32, a: u32) -> Weight {
    (0 as Weight)
      // Standard Error: 555_000
      .saturating_add((23_317_000 as Weight).saturating_mul(n as Weight))
      // Standard Error: 555_000
      .saturating_add((7_104_000 as Weight).saturating_mul(m as Weight))
      // Standard Error: 555_000
      .saturating_add((2_446_000 as Weight).saturating_mul(a as Weight))
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(n as Weight)))
      .saturating_add(T::DbWeight::get().writes(4 as Weight))
      .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(n as Weight)))
      .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(m as Weight)))
      .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
  }
  // Storage: Uniques Asset (r:1 w:1)
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques CollectionMaxSupply (r:1 w:0)
  // Storage: Uniques Account (r:0 w:1)
  fn mint() -> Weight {
    (86_200_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques Asset (r:1 w:1)
  // Storage: Uniques Account (r:0 w:1)
  fn burn() -> Weight {
    (81_040_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Uniques Class (r:1 w:0)
  // Storage: Uniques Asset (r:1 w:1)
  // Storage: Uniques Account (r:0 w:2)
  fn transfer() -> Weight {
    (68_690_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques Asset (r:100 w:100)
  fn redeposit(i: u32) -> Weight {
    (0 as Weight)
      // Standard Error: 132_000
      .saturating_add((23_710_000 as Weight).saturating_mul(i as Weight))
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(i as Weight)))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
      .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(i as Weight)))
  }
  // Storage: Uniques Asset (r:1 w:1)
  // Storage: Uniques Class (r:1 w:0)
  fn freeze() -> Weight {
    (38_840_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques Asset (r:1 w:1)
  // Storage: Uniques Class (r:1 w:0)
  fn thaw() -> Weight {
    (31_510_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  fn freeze_collection() -> Weight {
    (27_390_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  fn thaw_collection() -> Weight {
    (35_391_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques OwnershipAcceptance (r:1 w:1)
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques ClassAccount (r:0 w:2)
  fn transfer_ownership() -> Weight {
    (40_130_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(4 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  fn set_team() -> Weight {
    (25_670_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques ClassAccount (r:0 w:1)
  fn force_item_status() -> Weight {
    (42_890_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques InstanceMetadataOf (r:1 w:0)
  // Storage: Uniques Attribute (r:1 w:1)
  fn set_attribute() -> Weight {
    (59_360_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques InstanceMetadataOf (r:1 w:0)
  // Storage: Uniques Attribute (r:1 w:1)
  fn clear_attribute() -> Weight {
    (55_909_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques InstanceMetadataOf (r:1 w:1)
  fn set_metadata() -> Weight {
    (48_610_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques InstanceMetadataOf (r:1 w:1)
  fn clear_metadata() -> Weight {
    (65_911_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:1)
  // Storage: Uniques ClassMetadataOf (r:1 w:1)
  fn set_collection_metadata() -> Weight {
    (68_790_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Uniques Class (r:1 w:0)
  // Storage: Uniques ClassMetadataOf (r:1 w:1)
  fn clear_collection_metadata() -> Weight {
    (41_990_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques Class (r:1 w:0)
  // Storage: Uniques Asset (r:1 w:1)
  fn approve_transfer() -> Weight {
    (33_320_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques Class (r:1 w:0)
  // Storage: Uniques Asset (r:1 w:1)
  fn cancel_approval() -> Weight {
    (31_200_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques OwnershipAcceptance (r:1 w:1)
  fn set_accept_ownership() -> Weight {
    (27_130_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(1 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  // Storage: Uniques CollectionMaxSupply (r:1 w:1)
  // Storage: Uniques Class (r:1 w:0)
  fn set_collection_max_supply() -> Weight {
    (25_880_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
}
