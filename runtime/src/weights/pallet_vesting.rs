// This file is part of Anagolay Foundation.

// Copyright (C) 2019-2022 Anagolay Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2022-07-20, STEPS: `[50, ]`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/anagolay
// benchmark
// --chain=dev
// --steps=50
// --repeat=100
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./runtime/src/weights/pallet_vesting.rs
// --template=./templates/dep-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
  traits::Get,
  weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
  fn vest_locked(l: u32) -> Weight {
    (38_170_000 as Weight)
      // Standard Error: 1_000
      .saturating_add((188_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(1 as Weight))
  }
  fn vest_unlocked(l: u32) -> Weight {
    (40_091_000 as Weight)
      // Standard Error: 0
      .saturating_add((154_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  fn vest_other_locked(l: u32) -> Weight {
    (37_284_000 as Weight)
      // Standard Error: 0
      .saturating_add((175_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  fn vest_other_unlocked(l: u32) -> Weight {
    (39_801_000 as Weight)
      // Standard Error: 0
      .saturating_add((158_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  fn vested_transfer(l: u32) -> Weight {
    (81_694_000 as Weight)
      // Standard Error: 1_000
      .saturating_add((194_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  fn force_vested_transfer(l: u32) -> Weight {
    (80_121_000 as Weight)
      // Standard Error: 1_000
      .saturating_add((224_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(4 as Weight))
      .saturating_add(T::DbWeight::get().writes(4 as Weight))
  }
}
