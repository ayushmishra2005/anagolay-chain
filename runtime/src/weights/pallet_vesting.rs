// This file is part of Anagolay Network.

// Copyright (C) 2019-2023 Anagolay Network.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-10, STEPS: `50`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/anagolay
// benchmark
// pallet
// --chain
// dev
// --steps
// 10
// --repeat
// 10
// --pallet
// pallet_vesting
// --extrinsic
// *
// --execution
// wasm
// --wasm-execution
// compiled
// --heap-pages
// 4096
// --output
// ./runtime/src/weights/pallet_vesting.rs
// --template
// ./templates/dep-weight-template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{
  sp_std::marker::PhantomData,
  traits::Get,
  weights::{constants::RocksDbWeight, Weight},
};

/// Weights for pallet_vesting using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::WeightInfo for WeightInfo<T> {
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  fn vest_locked(_l: u32, _s: u32) -> Weight {
    (85_336_000 as Weight)
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  fn vest_unlocked(l: u32, _s: u32) -> Weight {
    (67_681_000 as Weight)
      // Standard Error: 93_000
      .saturating_add((214_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(2 as Weight))
      .saturating_add(T::DbWeight::get().writes(2 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  // Storage: System Account (r:1 w:1)
  fn vest_other_locked(l: u32, s: u32) -> Weight {
    (65_393_000 as Weight)
      // Standard Error: 80_000
      .saturating_add((66_000 as Weight).saturating_mul(l as Weight))
      // Standard Error: 144_000
      .saturating_add((89_000 as Weight).saturating_mul(s as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  // Storage: System Account (r:1 w:1)
  fn vest_other_unlocked(l: u32, s: u32) -> Weight {
    (62_865_000 as Weight)
      // Standard Error: 83_000
      .saturating_add((121_000 as Weight).saturating_mul(l as Weight))
      // Standard Error: 148_000
      .saturating_add((44_000 as Weight).saturating_mul(s as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: System Account (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  fn vested_transfer(l: u32, _s: u32) -> Weight {
    (100_670_000 as Weight)
      // Standard Error: 109_000
      .saturating_add((2_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: System Account (r:2 w:2)
  // Storage: Balances Locks (r:1 w:1)
  fn force_vested_transfer(l: u32, _s: u32) -> Weight {
    (92_979_000 as Weight)
      // Standard Error: 128_000
      .saturating_add((382_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(4 as Weight))
      .saturating_add(T::DbWeight::get().writes(4 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  // Storage: System Account (r:1 w:1)
  fn not_unlocking_merge_schedules(l: u32, s: u32) -> Weight {
    (51_626_000 as Weight)
      // Standard Error: 71_000
      .saturating_add((304_000 as Weight).saturating_mul(l as Weight))
      // Standard Error: 132_000
      .saturating_add((335_000 as Weight).saturating_mul(s as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
  // Storage: Vesting Vesting (r:1 w:1)
  // Storage: Balances Locks (r:1 w:1)
  // Storage: System Account (r:1 w:1)
  fn unlocking_merge_schedules(l: u32, _s: u32) -> Weight {
    (64_604_000 as Weight)
      // Standard Error: 84_000
      .saturating_add((276_000 as Weight).saturating_mul(l as Weight))
      .saturating_add(T::DbWeight::get().reads(3 as Weight))
      .saturating_add(T::DbWeight::get().writes(3 as Weight))
  }
}
